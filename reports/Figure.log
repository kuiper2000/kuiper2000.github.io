Traceback (most recent call last):
  File "/Users/Shared/miniconda3/envs/default_env2/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/Shared/miniconda3/envs/default_env2/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/Shared/miniconda3/envs/default_env2/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/Shared/miniconda3/envs/default_env2/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/Users/Shared/miniconda3/envs/default_env2/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/Shared/miniconda3/envs/default_env2/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/Shared/miniconda3/envs/default_env2/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/Shared/miniconda3/envs/default_env2/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
#!pip install netCDF4
from netCDF4 import Dataset as NetCDFFile
import random
import timeit
import pickle
from scipy import stats
import xarray as xr
import pandas as pd
import statistics
from scipy import interpolate
import os
import pytz, datetime
import multiprocessing as mp
import geopandas
#!pip install descartes
import descartes
from datetime import date

from datetime import datetime

import json
import openai
import os 

def load_api_key(secrets_file="/home/kaichiht/openai.json"):
    with open(secrets_file) as f:
        secrets = json.load(f)
    return secrets["OPENAI_API_KEY"]

# Set secret API key
# Typically, we'd use an environment variable (e.g., echo "export OPENAI_API_KEY='yourkey'" >> ~/.zshrc)
# However, using "internalConsole" in launch.json requires setting it in the code for compatibility with Hebrew
api_key = load_api_key()
openai.api_key = api_key

%reload_ext jupyter_ai

os.environ["OPENAI_API_KEY"]=openai.api_key
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [0;32mIn [1], line 25[0m
[1;32m     22[0m [38;5;28;01mfrom[39;00m [38;5;21;01mdatetime[39;00m [38;5;28;01mimport[39;00m datetime
[1;32m     24[0m [38;5;28;01mimport[39;00m [38;5;21;01mjson[39;00m
[0;32m---> 25[0m [38;5;28;01mimport[39;00m [38;5;21;01mopenai[39;00m
[1;32m     26[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m 
[1;32m     28[0m [38;5;28;01mdef[39;00m [38;5;21mload_api_key[39m(secrets_file[38;5;241m=[39m[38;5;124m"[39m[38;5;124m/home/kaichiht/openai.json[39m[38;5;124m"[39m):

[0;31mModuleNotFoundError[0m: No module named 'openai'
ModuleNotFoundError: No module named 'openai'

